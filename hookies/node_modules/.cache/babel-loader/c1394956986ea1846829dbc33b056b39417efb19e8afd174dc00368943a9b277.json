{"ast":null,"code":"\"use strict\";\n\nrequire(\"function.name\");\n\n/**\n * Typpy\n * Gets the type of the input value or compares it\n * with a provided type.\n *\n * Usage:\n *\n * ```js\n * Typpy({}) // => \"object\"\n * Typpy(42, Number); // => true\n * Typpy.get([], \"array\"); => true\n * ```\n *\n * @name Typpy\n * @function\n * @param {Anything} input The input value.\n * @param {Constructor|String} target The target type.\n * It could be a string (e.g. `\"array\"`) or a\n * constructor (e.g. `Array`).\n * @return {String|Boolean} It returns `true` if the\n * input has the provided type `target` (if was provided),\n * `false` if the input type does *not* have the provided type\n * `target` or the stringified type of the input (always lowercase).\n */\nfunction Typpy(input, target) {\n  if (arguments.length === 2) {\n    return Typpy.is(input, target);\n  }\n  return Typpy.get(input, true);\n}\n\n/**\n * Typpy.is\n * Checks if the input value has a specified type.\n *\n * @name Typpy.is\n * @function\n * @param {Anything} input The input value.\n * @param {Constructor|String} target The target type.\n * It could be a string (e.g. `\"array\"`) or a\n * constructor (e.g. `Array`).\n * @return {Boolean} `true`, if the input has the same\n * type with the target or `false` otherwise.\n */\nTyppy.is = function (input, target) {\n  return Typpy.get(input, typeof target === \"string\") === target;\n};\n\n/**\n * Typpy.get\n * Gets the type of the input value. This is used internally.\n *\n * @name Typpy.get\n * @function\n * @param {Anything} input The input value.\n * @param {Boolean} str A flag to indicate if the return value\n * should be a string or not.\n * @return {Constructor|String} The input value constructor\n * (if any) or the stringified type (always lowercase).\n */\nTyppy.get = function (input, str) {\n  if (typeof input === \"string\") {\n    return str ? \"string\" : String;\n  }\n  if (null === input) {\n    return str ? \"null\" : null;\n  }\n  if (undefined === input) {\n    return str ? \"undefined\" : undefined;\n  }\n  if (input !== input) {\n    return str ? \"nan\" : NaN;\n  }\n  return str ? input.constructor.name.toLowerCase() : input.constructor;\n};\nmodule.exports = Typpy;","map":{"version":3,"names":["require","Typpy","input","target","arguments","length","is","get","str","String","undefined","NaN","constructor","name","toLowerCase","module","exports"],"sources":["/home/gordei/VSprojects/FULLSTACK/Project/hookies/node_modules/typpy/lib/index.js"],"sourcesContent":["\"use strict\";\n\nrequire(\"function.name\");\n\n/**\n * Typpy\n * Gets the type of the input value or compares it\n * with a provided type.\n *\n * Usage:\n *\n * ```js\n * Typpy({}) // => \"object\"\n * Typpy(42, Number); // => true\n * Typpy.get([], \"array\"); => true\n * ```\n *\n * @name Typpy\n * @function\n * @param {Anything} input The input value.\n * @param {Constructor|String} target The target type.\n * It could be a string (e.g. `\"array\"`) or a\n * constructor (e.g. `Array`).\n * @return {String|Boolean} It returns `true` if the\n * input has the provided type `target` (if was provided),\n * `false` if the input type does *not* have the provided type\n * `target` or the stringified type of the input (always lowercase).\n */\nfunction Typpy(input, target) {\n    if (arguments.length === 2) {\n        return Typpy.is(input, target);\n    }\n    return Typpy.get(input, true);\n}\n\n/**\n * Typpy.is\n * Checks if the input value has a specified type.\n *\n * @name Typpy.is\n * @function\n * @param {Anything} input The input value.\n * @param {Constructor|String} target The target type.\n * It could be a string (e.g. `\"array\"`) or a\n * constructor (e.g. `Array`).\n * @return {Boolean} `true`, if the input has the same\n * type with the target or `false` otherwise.\n */\nTyppy.is = function (input, target) {\n    return Typpy.get(input, typeof target === \"string\") === target;\n};\n\n/**\n * Typpy.get\n * Gets the type of the input value. This is used internally.\n *\n * @name Typpy.get\n * @function\n * @param {Anything} input The input value.\n * @param {Boolean} str A flag to indicate if the return value\n * should be a string or not.\n * @return {Constructor|String} The input value constructor\n * (if any) or the stringified type (always lowercase).\n */\nTyppy.get = function (input, str) {\n\n    if (typeof input === \"string\") {\n        return str ? \"string\" : String;\n    }\n\n    if (null === input) {\n        return str ? \"null\" : null;\n    }\n\n    if (undefined === input) {\n        return str ? \"undefined\" : undefined;\n    }\n\n    if (input !== input) {\n        return str ? \"nan\" : NaN;\n    }\n\n    return str ? input.constructor.name.toLowerCase() : input.constructor;\n};\n\nmodule.exports = Typpy;"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAAC,eAAe,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC1B,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAOJ,KAAK,CAACK,EAAE,CAACJ,KAAK,EAAEC,MAAM,CAAC;EAClC;EACA,OAAOF,KAAK,CAACM,GAAG,CAACL,KAAK,EAAE,IAAI,CAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,KAAK,CAACK,EAAE,GAAG,UAAUJ,KAAK,EAAEC,MAAM,EAAE;EAChC,OAAOF,KAAK,CAACM,GAAG,CAACL,KAAK,EAAE,OAAOC,MAAM,KAAK,QAAQ,CAAC,KAAKA,MAAM;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,KAAK,CAACM,GAAG,GAAG,UAAUL,KAAK,EAAEM,GAAG,EAAE;EAE9B,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAOM,GAAG,GAAG,QAAQ,GAAGC,MAAM;EAClC;EAEA,IAAI,IAAI,KAAKP,KAAK,EAAE;IAChB,OAAOM,GAAG,GAAG,MAAM,GAAG,IAAI;EAC9B;EAEA,IAAIE,SAAS,KAAKR,KAAK,EAAE;IACrB,OAAOM,GAAG,GAAG,WAAW,GAAGE,SAAS;EACxC;EAEA,IAAIR,KAAK,KAAKA,KAAK,EAAE;IACjB,OAAOM,GAAG,GAAG,KAAK,GAAGG,GAAG;EAC5B;EAEA,OAAOH,GAAG,GAAGN,KAAK,CAACU,WAAW,CAACC,IAAI,CAACC,WAAW,EAAE,GAAGZ,KAAK,CAACU,WAAW;AACzE,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAGf,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}