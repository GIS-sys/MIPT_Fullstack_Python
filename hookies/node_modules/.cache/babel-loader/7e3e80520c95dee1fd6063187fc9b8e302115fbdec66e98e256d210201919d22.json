{"ast":null,"code":"\"use strict\";\n\nvar mkdirp = require(\"mkdirp\"),\n  fs = require(\"fs\"),\n  abs = require(\"abs\"),\n  typpy = require(\"typpy\"),\n  path = require(\"path\");\n\n/**\n * writeFileP\n * Create the directory structure and then create the file.\n *\n * @name writeFileP\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @param {Function} cb The callback function.\n */\nfunction writeFileP(outputPath, data, cb) {\n  outputPath = abs(outputPath);\n  var dirname = path.dirname(outputPath);\n  mkdirp(dirname, function (err) {\n    if (err) {\n      return cb(err);\n    }\n    var str = data;\n    if (typpy(data, Array) || typpy(data, Object)) {\n      str = JSON.stringify(data, null, 2);\n    }\n    fs.writeFile(outputPath, str, function (err) {\n      return cb(err, data);\n    });\n  });\n}\n\n/**\n * writeFileP.sync\n * The sync version of the function.\n *\n * @name writeFileP.sync\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @returns {String|Object} The content written in the file. If an object was provided, the stringified version will *not* be returned but the raw value.\n */\nwriteFileP.sync = function (outputPath, data) {\n  outputPath = abs(outputPath);\n  var dirname = path.dirname(outputPath);\n  mkdirp.sync(dirname);\n  var str = data;\n  if (typpy(data, Array) || typpy(data, Object)) {\n    str = JSON.stringify(data, null, 2);\n  }\n  fs.writeFileSync(outputPath, str);\n  return data;\n};\nmodule.exports = writeFileP;","map":{"version":3,"names":["mkdirp","require","fs","abs","typpy","path","writeFileP","outputPath","data","cb","dirname","err","str","Array","Object","JSON","stringify","writeFile","sync","writeFileSync","module","exports"],"sources":["/home/gordei/VSprojects/FULLSTACK/Project/hookies/node_modules/write-file-p/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar mkdirp = require(\"mkdirp\"),\n    fs = require(\"fs\"),\n    abs = require(\"abs\"),\n    typpy = require(\"typpy\"),\n    path = require(\"path\");\n\n/**\n * writeFileP\n * Create the directory structure and then create the file.\n *\n * @name writeFileP\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @param {Function} cb The callback function.\n */\nfunction writeFileP(outputPath, data, cb) {\n    outputPath = abs(outputPath);\n    var dirname = path.dirname(outputPath);\n    mkdirp(dirname, function (err) {\n        if (err) {\n            return cb(err);\n        }\n        var str = data;\n        if (typpy(data, Array) || typpy(data, Object)) {\n            str = JSON.stringify(data, null, 2);\n        }\n        fs.writeFile(outputPath, str, function (err) {\n            return cb(err, data);\n        });\n    });\n}\n\n/**\n * writeFileP.sync\n * The sync version of the function.\n *\n * @name writeFileP.sync\n * @function\n * @param {String} outputPath The path to the file you want to create.\n * @param {String|Object} data The file content. If an Array/Object is provided, it will be stringified.\n * @returns {String|Object} The content written in the file. If an object was provided, the stringified version will *not* be returned but the raw value.\n */\nwriteFileP.sync = function (outputPath, data) {\n    outputPath = abs(outputPath);\n    var dirname = path.dirname(outputPath);\n    mkdirp.sync(dirname);\n    var str = data;\n    if (typpy(data, Array) || typpy(data, Object)) {\n        str = JSON.stringify(data, null, 2);\n    }\n    fs.writeFileSync(outputPath, str);\n    return data;\n};\n\nmodule.exports = writeFileP;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAC1BC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;EAClBE,GAAG,GAAGF,OAAO,CAAC,KAAK,CAAC;EACpBG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC;EACxBI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,UAAU,CAACC,UAAU,EAAEC,IAAI,EAAEC,EAAE,EAAE;EACtCF,UAAU,GAAGJ,GAAG,CAACI,UAAU,CAAC;EAC5B,IAAIG,OAAO,GAAGL,IAAI,CAACK,OAAO,CAACH,UAAU,CAAC;EACtCP,MAAM,CAACU,OAAO,EAAE,UAAUC,GAAG,EAAE;IAC3B,IAAIA,GAAG,EAAE;MACL,OAAOF,EAAE,CAACE,GAAG,CAAC;IAClB;IACA,IAAIC,GAAG,GAAGJ,IAAI;IACd,IAAIJ,KAAK,CAACI,IAAI,EAAEK,KAAK,CAAC,IAAIT,KAAK,CAACI,IAAI,EAAEM,MAAM,CAAC,EAAE;MAC3CF,GAAG,GAAGG,IAAI,CAACC,SAAS,CAACR,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACvC;IACAN,EAAE,CAACe,SAAS,CAACV,UAAU,EAAEK,GAAG,EAAE,UAAUD,GAAG,EAAE;MACzC,OAAOF,EAAE,CAACE,GAAG,EAAEH,IAAI,CAAC;IACxB,CAAC,CAAC;EACN,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,UAAU,CAACY,IAAI,GAAG,UAAUX,UAAU,EAAEC,IAAI,EAAE;EAC1CD,UAAU,GAAGJ,GAAG,CAACI,UAAU,CAAC;EAC5B,IAAIG,OAAO,GAAGL,IAAI,CAACK,OAAO,CAACH,UAAU,CAAC;EACtCP,MAAM,CAACkB,IAAI,CAACR,OAAO,CAAC;EACpB,IAAIE,GAAG,GAAGJ,IAAI;EACd,IAAIJ,KAAK,CAACI,IAAI,EAAEK,KAAK,CAAC,IAAIT,KAAK,CAACI,IAAI,EAAEM,MAAM,CAAC,EAAE;IAC3CF,GAAG,GAAGG,IAAI,CAACC,SAAS,CAACR,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;EACvC;EACAN,EAAE,CAACiB,aAAa,CAACZ,UAAU,EAAEK,GAAG,CAAC;EACjC,OAAOJ,IAAI;AACf,CAAC;AAEDY,MAAM,CAACC,OAAO,GAAGf,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}